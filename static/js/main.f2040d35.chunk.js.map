{"version":3,"sources":["desc.js","labels.js","image_click_info.js","main.js","serviceWorker.js","index.js"],"names":["classNames","require","Desc","desc","this","props","shouldBeActive","className","onClick","closeDesc","id","headline","text","changeActivePoint","React","Component","labels","ImageClickInfo","direction","points","properId","state","openedDesc","noOfPts","length","setState","descHeadline","fields","descText","description","carImageWrap","src","image","alt","draggable","map","point","index","key","style","top","coords","split","left","e","client","createClient","space","accessToken","Main","sections","getEntries","content_type","then","response","items","catch","console","error","section","file","url","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f2040d35.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\nvar classNames = require('classnames');\r\n\r\nclass Desc extends React.Component {\r\n    render() {\r\n        var desc = classNames({\r\n            'car-desc-wrap': true,\r\n            'active-desc': this.props.shouldBeActive,\r\n        })\r\n        return (\r\n            <div className={desc}>\r\n                <div className=\"close-button\" onClick={this.props.closeDesc}>\r\n                    <div id=\"line1\"></div>\r\n                    <div id=\"line2\"></div>\r\n                </div>\r\n                <div id=\"car-desc\">\r\n                    <div id=\"car-desc-content\">\r\n                        <p id=\"car-desc-gen\">Interior</p>\r\n                        <h1 id=\"car-desc-header\">{this.props.headline}</h1>\r\n                        <p>{this.props.text}</p>\r\n                    </div>\r\n                    <div className=\"control-buttons\">\r\n                        <p id=\"previous\" onClick={() => { this.props.changeActivePoint(-1) }}>Previous</p>\r\n                        <p id=\"next\" onClick={() => { this.props.changeActivePoint(1) }}>Next</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Desc;","export const labels = {\r\n    defHeadline: \"Click any point\",\r\n    defDesc: \"If you want to see description of any car feature - just click it and the description will be displayed right there!\",\r\n    sections: [\r\n        {\r\n            image: \"car-ww.png\",\r\n            points: [\r\n                {\r\n                    headline: \"HEAD-UP DISPLAY\",\r\n                    description: \"The head-up display of the LS has been unobtrusively positioned in your field of vision and projects essential information onto the windshield. At 24 inches, the display is the largest of its kind and produces such a clear and sharp image that you can see the data in the brightest sunlight.\",\r\n                    top: \"25%\",\r\n                    left: \"26%\"\r\n                },\r\n                {\r\n                    headline: \"LEXUS PREMIUM NAVIGATION SYSTEM\",\r\n                    description: \"The multimedia system not only offers high-resolution 3D graphics and the latest map material, but also access to online search, Google Street View® and Panoramio® and even reads incoming text messages if desired. You can also transfer your route to your smartphone and navigate to your destination on foot. You can also send routes planned on your smartphone to the navigation system of the LS.\",\r\n                    top: \"45%\",\r\n                    left: \"50%\"\r\n                },\r\n                {\r\n                    headline: \"STEERING WHEEL\",\r\n                    description: \"The ergonomic 3-spoke leather steering wheel hugs your hands and can even be heated at low temperatures. Alternatively, a version is available that combines real leather with beautifully fine-grained wooden inlays.\",\r\n                    top: \"63%\",\r\n                    left: \"26%\"\r\n                },\r\n                {\r\n                    headline: \"TOUCHPAD\",\r\n                    description: \"The LS has a 12.3-inch screen that can be operated using a touchpad or voice command. The touchpad interface was designed for intuitive operation like a smartphone.\",\r\n                    top: \"84%\",\r\n                    left: \"49%\"\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n}","import React from \"react\";\r\nimport \"./style.css\";\r\nimport Desc from \"./desc\";\r\nimport { labels } from \"./labels\";\r\nvar classNames = require('classnames');\r\n\r\nclass ImageClickInfo extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            descHeadline: labels.defHeadline,\r\n            descText: labels.defDesc,\r\n            openedDesc: -1,\r\n            shouldBeActive: false,\r\n        }\r\n    }\r\n    changeActivePoint = (direction) => {\r\n        const { points } = this.props;\r\n        let properId = this.state.openedDesc + direction;\r\n        const noOfPts = points.length;\r\n        if (properId < 0) {\r\n            properId = noOfPts - 1;\r\n        } else if (properId > noOfPts - 1) {\r\n            properId = 0;\r\n        }\r\n        this.setState({\r\n            descHeadline: points[properId].fields.headline,\r\n            descText: points[properId].fields.description,\r\n            openedDesc: properId,\r\n            shouldBeActive: true,\r\n        })\r\n    }\r\n    closeDesc = () => {\r\n        this.setState({\r\n            descHeadline: labels.defHeadline,\r\n            descText: labels.defDesc,\r\n            openedDesc: -1,\r\n            shouldBeActive: false,\r\n        })\r\n    }\r\n    render() {\r\n        var carImageWrap = classNames({\r\n            'car-image-points-wrap': true,\r\n            'active': this.state.shouldBeActive,\r\n        })\r\n        return (\r\n            <div className=\"section-wrap\">\r\n                <div className=\"image-desc-wrap\">\r\n                    <div className=\"car-image\">\r\n                        <img src={this.props.image} alt=\"lexus-interior\" id=\"car-background\" draggable=\"false\" />\r\n                        <div className={carImageWrap}>\r\n                            {this.props.points.map((point, index) =>\r\n                                <div className=\"car-image-point-wrap\" key={`point-wrap ${index}`}>\r\n                                    <p\r\n                                        className={`point-title ${index === this.state.openedDesc ? 'active-point-title' : ''}`}\r\n                                        key={`title ${index}`}\r\n                                        style={{\r\n                                            top: point.fields.coords.split('x')[0],\r\n                                            left: point.fields.coords.split('x')[1],\r\n                                        }}\r\n                                    >{point.fields.headline}</p>\r\n                                    <span className={`car-image-point ${index === this.state.openedDesc ? 'active-point' : ''}`}\r\n                                        key={`point ${index}`}\r\n                                        onClick={(e) => this.setState({\r\n                                            descHeadline: point.fields.headline,\r\n                                            descText: point.fields.description,\r\n                                            openedDesc: index,\r\n                                            shouldBeActive: true,\r\n                                        })}\r\n                                        style={{\r\n                                            top: point.fields.coords.split('x')[0],\r\n                                            left: point.fields.coords.split('x')[1]\r\n                                        }}\r\n                                    >\r\n                                    </span>\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                    <Desc\r\n                        headline={this.state.descHeadline}\r\n                        text={this.state.descText}\r\n                        openedDesc={this.state.openedDesc}\r\n                        changeActivePoint={this.changeActivePoint}\r\n                        shouldBeActive={this.state.shouldBeActive}\r\n                        closeDesc={this.closeDesc}\r\n                    />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default ImageClickInfo;","import React from \"react\";\r\nimport \"./style.css\";\r\nimport ImageClickInfo from \"./image_click_info\";\r\nconst contentful = require('contentful')\r\nconst client = contentful.createClient({\r\n    space: 'q77bwy72v1n8',\r\n    accessToken: 'nkeWCevUXbtdGZHFRLV2HcK0E6xgVmcLwyiD-mYMKjE'\r\n})\r\nclass Main extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            sections: [],\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        client.getEntries({ content_type: 'section' })\r\n            .then((response) => this.setState({ sections: response.items }))\r\n            .catch(console.error);\r\n    }\r\n    render() {\r\n        return (\r\n            <div id=\"main-wrap\">\r\n                {this.state.sections.map((section, index) =>\r\n                    <ImageClickInfo\r\n                        image={section.fields.image.fields.file.url}\r\n                        key={index}\r\n                        points={section.fields.points}\r\n                    />\r\n                )}\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Main;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./style.scss\";\r\nimport Main from \"./main\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<Main />, document.getElementById(\"root\"));\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}